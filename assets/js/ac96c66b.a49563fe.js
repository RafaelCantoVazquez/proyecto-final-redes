"use strict";(self.webpackChunkproyecto_final_redes=self.webpackChunkproyecto_final_redes||[]).push([[14],{3905:function(e,r,a){a.d(r,{Zo:function(){return u},kt:function(){return m}});var n=a(7294);function o(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function t(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){o(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,n,o=function(e,r){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||(o[a]=e[a]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),a=r;return e&&(a="function"==typeof e?e(r):t(t({},r),e)),a},u=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var a=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(a),m=o,v=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return a?n.createElement(v,t(t({ref:r},u),{},{components:a})):n.createElement(v,t({ref:r},u))}));function m(e,r){var a=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=a.length,t=new Array(i);t[0]=p;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,t[1]=s;for(var l=2;l<i;l++)t[l]=a[l];return n.createElement.apply(null,t)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},4495:function(e,r,a){a.r(r),a.d(r,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var n=a(7462),o=a(3366),i=(a(7294),a(3905)),t=["components"],s={sidebar_position:2},c="Arquitectura cliente-servidor",l={unversionedId:"sockets-application-programming/page2",id:"sockets-application-programming/page2",isDocsHomePage:!1,title:"Arquitectura cliente-servidor",description:"\xbfCu\xe1l es la arquitectura entre el cliente - servidor?",source:"@site/docs/sockets-application-programming/page2.md",sourceDirName:"sockets-application-programming",slug:"/sockets-application-programming/page2",permalink:"/docs/sockets-application-programming/page2",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Programaci\xf3n de aplicaciones con sockets",permalink:"/docs/sockets-application-programming/page1"},next:{title:"Ejemplo",permalink:"/docs/sockets-application-programming/page3"}},u=[{value:"\xbfCu\xe1l es la arquitectura entre el cliente - servidor?",id:"cu\xe1l-es-la-arquitectura-entre-el-cliente---servidor",children:[],level:2},{value:"El servidor",id:"el-servidor",children:[{value:"Pasos",id:"pasos",children:[],level:3}],level:2},{value:"El cliente",id:"el-cliente",children:[{value:"Pasos",id:"pasos-1",children:[],level:3}],level:2}],d={toc:u};function p(e){var r=e.components,s=(0,o.Z)(e,t);return(0,i.kt)("wrapper",(0,n.Z)({},d,s,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arquitectura-cliente-servidor"},"Arquitectura cliente-servidor"),(0,i.kt)("h2",{id:"cu\xe1l-es-la-arquitectura-entre-el-cliente---servidor"},"\xbfCu\xe1l es la arquitectura entre el cliente - servidor?"),(0,i.kt)("p",null,"Es un modelo de aplicaci\xf3n distribuida en el que las tareas se reparten entre los proveedores de recursos o servicios, llamados servidores, y los demandantes, llamados clientes. Un programa cliente realiza peticiones a otro programa, el servidor, que le da respuesta. Esta idea tambi\xe9n se puede aplicar a programas que se ejecutan sobre una sola m\xe1quina, aunque es m\xe1s ventajosa en un sistema operativo multiusuario distribuido a trav\xe9s de una red de computadores. "),(0,i.kt)("p",null,"En esta arquitectura la capacidad de proceso est\xe1 repartida entre los clientes y los servidores. La separaci\xf3n entre cliente y servidor es una separaci\xf3n de tipo l\xf3gico, donde el servidor no se ejecuta necesariamente sobre una sola m\xe1quina ni es necesariamente un s\xf3lo programa. Los tipos espec\xedfi cos de servidores incluyen los servidores webs, los servidores de archivo, los servidores del correo, entre otros. Mientras que sus prop\xf3sitos var\xedan de unos servicios a otros, la arquitectura b\xe1sica seguir\xe1 siendo la misma.\nLa comunicaci\xf3n entre procesos a trav\xe9s de sockets se basa en la filosof\xeda cliente-servidor: un proceso en esta comunicaci\xf3n actuar\xe1 de proceso servidor creando un socket cuyo nombre conocer\xe1 el proceso cliente, el cual podr\xe1 \u201chablar\u201d con el proceso servidor a trav\xe9s de la conexi\xf3n con dicho socket nombrado. "),(0,i.kt)("p",null,"El proceso crea un socket sin nombre cuyo valor de vuelta es un descriptor sobre el que se leer\xe1 o escribir\xe1, permiti\xe9ndose una comunicaci\xf3n bidireccional, caracter\xedstica propia de los sockets. El mecanismo de comunicaci\xf3n v\xeda sockets tiene los siguientes pasos:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"El proceso servidor crea un socket con nombre y espera la conexi\xf3n."),(0,i.kt)("li",{parentName:"ul"},"El proceso cliente crea un socket sin nombre. "),(0,i.kt)("li",{parentName:"ul"},"El proceso cliente realiza una petici\xf3n de conexi\xf3n al socket servidor. "),(0,i.kt)("li",{parentName:"ul"},"El cliente realiza la conexi\xf3n a trav\xe9s de su socket mientras el proceso servidor mantiene el socket servidor original con nombre.")),(0,i.kt)("p",null,"Es muy com\xfan en este tipo de comunicaci\xf3n lanzar un proceso hijo, una vez realizada la conexi\xf3n, que se ocupe del intercambio de informaci\xf3n con el proceso cliente mientras el proceso padre servidor sigue aceptando conexiones. Para eliminar esta caracter\xedstica se cerrar\xe1 el descriptor del socket servidor con nombre en cuanto realice una conexi\xf3n con un proceso socket cliente."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Arquitectura client/server en el lenguaje java"),"\n",(0,i.kt)("img",{alt:"Docs Version Dropdown",src:a(2362).Z})),(0,i.kt)("h2",{id:"el-servidor"},"El servidor"),(0,i.kt)("p",null,"A partir de este punto comenzamos con lo que es la programaci\xf3n en C++ de los sockets. Se debe poseer conocimientos de C++, de esta forma ser\xe1 m\xe1s f\xe1cil el atender el procedimiento a seguir.\nCon C++ en Unix/Linux, los pasos que debe seguir un programa servidor son los siguientes:"),(0,i.kt)("h3",{id:"pasos"},"Pasos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Realizar la apertura de un socket, mediante la funci\xf3n socket(). Esta funci\xf3n devuelve un descriptor de archivo normal, como puede devolverlo open(). La funci\xf3n socket() no hace absolutamente nada, salvo devolvernos y preparar un descriptor de fi chero que el sistema posteriormente asociar\xe1 a una conexi\xf3n en red. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Avisar al sistema operativo de que hemos abierto un socket y queremos que asocie nuestro programa a dicho socket. Se consigue mediante la funci\xf3n bind(). El sistema todav\xeda no atender\xe1 a las conexiones de clientes, simplemente anota que cuando empiece a hacerlo, tendr\xe1 que avisarnos. Es en esta llamada cuando se debe indicar el n\xfamero de servicio al que se quiere atender. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Avisar al sistema de que comience a atender dicha conexi\xf3n de red. Se consigue mediante la funci\xf3n listen(). A partir de este momento el sistema operativo anotar\xe1 la conexi\xf3n de cualquier cliente para pas\xe1rnosla cuando se lo pidamos. Si llegan clientes m\xe1s r\xe1pido de lo que somos capaces de atenderlos, el sistema operativo hace una \u201ccola\u201d con ellos y nos los ir\xe1 pasando seg\xfan vayamos pidi\xe9ndolo. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Pedir y aceptar las conexiones de clientes al sistema operativo. Para ello hacemos una llamada a la funci\xf3n accept(). Esta funci\xf3n le indica al sistema operativo que nos d\xe9 al siguiente cliente de la cola. Si no hay clientes se quedar\xe1 bloqueada hasta que alg\xfan cliente se conecte. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Escribir y recibir datos del cliente, por medio de las funciones write() y read(), que son exactamente las mismas que usamos para escribir o leer de un archivo. Obviamente, tanto cliente como servidor deben saber qu\xe9 datos esperan recibir, qu\xe9 datos deben enviar y en qu\xe9 formato. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Cierre de la comunicaci\xf3n y del socket, por medio de la funci\xf3n close(), que es la misma que sirve para cerrar un archivo."))),(0,i.kt)("h2",{id:"el-cliente"},"El cliente"),(0,i.kt)("p",null,"Los pasos que debe seguir un programa cliente son los siguientes: "),(0,i.kt)("h3",{id:"pasos-1"},"Pasos"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Realizar la apertura de un socket, como el servidor, por medio de la funci\xf3n socket() ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Solicitar conexi\xf3n con el servidor por medio de la funci\xf3n connect(). Dicha funci\xf3n quedar\xe1 bloqueada hasta que el servidor acepte nuestra conexi\xf3n o bien si no hay servidor en el sitio indicado, saldr\xe1 dando un error. En esta llamada se debe facilitar la direcci\xf3n IP del servidor y el n\xfamero de servicio que se desea. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Escribir y recibir datos del servidor por medio de las funciones write() y read(). Cerrar la comunicaci\xf3n por medio de close(). "))),(0,i.kt)("p",null,"Como se puede apreciar, el procedimiento en el cliente es mucho m\xe1s sencillo que el servidor, m\xe1s sin embargo, se debe como m\xednimo garantizar en los dos extremos, un paso de establecimiento de la comunicaci\xf3n, uno de transferencia de informaci\xf3n y uno mediante el cual se libera la comunicaci\xf3n."))}p.isMDXComponent=!0},2362:function(e,r,a){r.Z=a.p+"assets/images/Cliente-Server-cef699a069c044c64089bcc4bfe7e0c1.png"}}]);